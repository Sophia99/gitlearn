--分支管理
	分支的存在是为了实现多方协作，多进程作战的需求。每个分支在合并之前，不能不想查看，安全。另外一个优点是上传速度快。
	
-> 创建与合并分支
	Git对于每一次的提交，将所有提交的结果串成一条时间线，该时间线即为一条分支。
	更正：HEAD指向的是master，主分支。master指向的最新的提交。
	1. 创建分支dev，然后切换到dev分支：
		git checkout -b dev
		上面的命令相当于下面两个命令
		git branch dev
		git checkout dev
		
	2. 查看当前的分支：
		git branch
	a
	3. 切换回到master分支：
		git checkout master
		
	4. 将在dev分支上提交的内容合并到master
		git merge dev
		
	5. 删除dev分支
		git branch -d dev  //注意要点：要删除某条分支时，应该先回到master，完成分支合并后，实行分支删除
		
	对于非主分支，在每条分支上完成任务后，并且将结果合并到主分支后，删除非主分支。
	
-> 解决冲突
	1. （复习）查看文件中的内容：
		git diff <file>
	2. 先解决冲突，后提交，合并完成。把Git合并失败的文件，手动编辑为我们希望的内容，在提交。
	
-> 分支管理策略
	1. 适合团队开发中应该充分被应用
	2. 多人开发的话，mster主分支是稳定的，开发协作应该是在分支上进行，最后合并到某条分支，在合并到主分支中。
	3. git merge --no-ff -m “……” dev(表示分支名称)  
		该指令的 --no-ff表示的是使用普通模式合并，ff代表的fast forward的模式合并后会没有合并记录；
		-m “……”这个参数是提交时，添加描述，增加记录。
	
-> bug分支
	处理场景：临时新增紧急任务，既要保存现在未完成的工作以待日后继续完成，又要紧急处理当前的紧急工作。
	1. 保存当前未完成的分支，创建新的分支处理紧急问题
	2. 使用stash，将当前工作现场“存储”起来。
		git stash
	3. 处理完bug，回到2中的当前工作现场，由于Git把stash内容存在某个地方，需要回复一下，两个方法：
		>>>git stash apply  该恢复后，stash内容并不删除，需要使用git stash pop来删除
		>>>git stash pop  恢复的同时把stash内容删除
	4. 可以多次stash，入栈
		使用：git stash list 
		然后恢复指定的stash：git stash apply stash@{0/1/2}
		
-> Feature分支
	处理场景：开发中，添加新的功能进来；对于实验代码和主分支的代码分开；
	解决方案：每添加一个新功能，新建一个feature分支，在分支上增加，完成后没问题的话合并，但如果有问题可以删除feature。
	>>>强行删除分支
	git branch -D dev（某分支名称）
	
-> 多人协作
	1. 远程仓库的默认名称是origin，查看远程库的信息：
		$ git remote
		origin
		$ git remote -v
		origin  https://github.com/Sophia99/gitlearn.git (fetch)  (抓取)
		origin  https://github.com/Sophia99/gitlearn.git (push)   (推送)

	2. 推送分支
		含义：把某分支上的所有本地提交推送到远程库。推送时，需要制定本地分支。Git才能把该分支推送到远程库对应的远程分支上。
		$ git push origin master
		$ git push origin dev
		-> master分支是主分支，需要时刻与远程同步；
		-> dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
		-> bug分支只是用于本地修复bug，一般不需要推送到远程；
		-> feature分支是否推导远程，取决于你是否和你的小伙伴合作在上面开发。（功能）
		
	3. 抓取分支
		远程库clone到本地的master分支，只存在master分支；如果需要查看远程的dev分支，需要在本地创建dev分支：
		$ git checkout -b dev origin/dev  //本地创建和远程分支对应的分支，名称最好一致
		
		处理场景：如果你和他人同样修改了某一个文件
		出现结果：推送失败，因为他人的最新提交和你现在视图推送的提交有冲突
		解决方法：首先git pull把最新的提交从origin/dev中抓取下来，然后再本地合并，在推送：
		$ git pull 
		出现no tracking information，则说明需要指定本地dev分支与远程origin/dev分支的关系链接：
		$ git branch --set-upstream-to <branch-name> origin/<branch-name>
		
	4. 多人协作的工作模型：
		-> git push origin <branch-name> 推送个人的修改；
		-> 如果推送失败，那么远程分支比个人本地的分支版本新（已经有他人更新了远程分支），首先使用git pull视图合并
		-> 如果合并有冲突，则解决冲突，并在本地提交；
		-> 没有冲突或者解决掉冲突后，使用git push origin <branch-name>推送。
	
	总结：
	-> 查看远程库信息：$ git remote -v
	-> 推送本地分支：$ git push origin <branch-name>; 推送失败，则需要$ git pull抓取远程的新提交
	-> 本地创建和远程分支对应的分支，名称最好一致：$ git checkout -b <branch-name> <origin/branch-name>
	-> 建立本地分支和远程分支关联：$git branch --set-upstream <branch-name> <origin/branch-name>
	-> 从远程抓取分支$ git pull；出现冲突，先处理冲突
	

--Rebase（不太明白）
	处理场景：多人协作中，导致git的图谱会比较糟乱，需要将图变得精简
	目的：查看历史提交的变换时更直观和容易。
	解决方案：rebase--"变基"
	特点：把分支的提交历史“整理”成一条直线。
	缺点：把本地的分支已经被修改过了
	
		
		
	
	